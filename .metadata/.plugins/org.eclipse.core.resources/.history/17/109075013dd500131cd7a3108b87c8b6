import java.io.*;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.*;

public class GeneratorC {

	private static Random rnd;

	private static void writeToFile(byte[][] data, int n, int m, int mode,
			String fileName) throws IOException {
		BufferedOutputStream bos = new BufferedOutputStream(
				new FileOutputStream(new File(fileName)));
		bos.write(new byte[] { 66, 77 });
		bos.write(ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN)
				.putInt(n * m * 3 + 54).array());
		bos.write(new byte[] { 0, 0, 0, 0 });
		bos.write(ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN)
				.putInt(54).array());
		bos.write(ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN)
				.putInt(40).array());
		bos.write(ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN)
				.putInt(m).array());
		bos.write(ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN)
				.putInt(n).array());
		bos.write(new byte[] { 1, 0, 24, 0 });
		bos.write(ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN)
				.putInt(0).array());
		bos.write(ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN)
				.putInt(24).array());
		bos.write(ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN)
				.putInt(0).array());
		bos.write(ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN)
				.putInt(0).array());
		bos.write(ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN)
				.putInt(0).array());
		bos.write(ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN)
				.putInt(0).array());
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++) {
				if (mode == 2 && rnd.nextInt(20) == 0) {
					int tmp = rnd.nextInt(3);
					if (tmp == 0)
						bos.write(new byte[] { (byte) 255, 0, 0 });
					if (tmp == 1)
						bos.write(new byte[] { 0, (byte) 255, 0 });
					if (tmp == 2)
						bos.write(new byte[] { 0, 0, (byte) 255 });
					continue;
				}
				if ((data[i][j] & 1) == 1)
					bos.write(new byte[] { 0, 0, 0 });
				else if (mode == 1)
					bos.write(new byte[] { (byte) (255 - rnd.nextInt(200)),
							(byte) (255 - rnd.nextInt(200)),
							(byte) (255 - rnd.nextInt(200)) });
				else if (mode == 2)
					bos.write(new byte[] {
							(byte) (Math.abs(255 * (((double) i / n) * 2 - 1))),
							(byte) (Math.abs(255 * (((double) i / n) * 2 - 1))),
							(byte) (Math.abs(255 * (((double) i / n) * 2 - 1))) }); // (byte)(255
																					// *
																					// i
																					// /
																					// n)});
				else
					bos.write(new byte[] { (byte) 255, (byte) 255, (byte) 255 });
			}
		bos.close();
	}

	private static boolean check(int x, int y, int size, byte[][] data) {
		int cnt = 0;
		for (int i = x; i < x + size; i++)
			for (int j = y; j < y + size; j++)
				if (data[i][j] != 0)
					cnt++;
		if (cnt > size * size / 2)
			return false;
		return true;
	}

	private static byte[][] add(int x, int y, int size, byte[][] data, int n,
			int m) {
		for (int i = x; i < x + size; i++)
			for (int j = y; j < y + size; j++)
				data[i][j] = 1;
		for (int i = x - 2; i < x; i++)
			for (int j = y - 2; j < y + size + 2; j++)
				if ((i >= 0) && (i < n) && (j >= 0) && (j < m))
					if (data[i][j] == 0 || data[i][j] == 2)
						data[i][j] = 2;
					else
						data[i][j] = 3;
		for (int i = x + size; i < x + size + 2; i++)
			for (int j = y - 2; j < y + size + 2; j++)
				if (i >= 0 && i < n && j >= 0 && j < m)
					if (data[i][j] == 0 || data[i][j] == 2)
						data[i][j] = 2;
					else
						data[i][j] = 3;
		for (int i = x; i < x + size; i++)
			for (int j = y - 2; j < y; j++)
				if (i >= 0 && i < n && j >= 0 && j < m)
					if (data[i][j] == 0 || data[i][j] == 2)
						data[i][j] = 2;
					else
						data[i][j] = 3;
		for (int i = x; i < x + size; i++)
			for (int j = y + size; j < y + size + 2; j++)
				if (i >= 0 && i < n && j >= 0 && j < m)
					if (data[i][j] == 0 || data[i][j] == 2)
						data[i][j] = 2;
					else
						data[i][j] = 3;
		return data;
	}

	private static void generate1(String fileName) throws IOException {
		int n = 400, m = 400, size = 20, x, y;
		byte[][] b = new byte[n][m];
		for (int i = 0; i < 119; i++) {
			do {
				x = rnd.nextInt(n - size + 1);
				y = rnd.nextInt(m - size + 1);
			} while (!check(x, y, size, b));
			b = add(x, y, size, b, n, m);
		}
		writeToFile(b, n, m, 0, fileName);
	}

	public static void main(String[] args) throws IOException {
		rnd = new Random(48191);
		generate1("task1.bmp");

	}

}